#! /usr/bin/python

# Copyright 2017 by Vincent Fourmond
# This program is free software. It is distributed under the terms of the
# GNU General Public License version 3.0 or later, found at
# https://www.gnu.org/copyleft/gpl.html
#
# There is NO WARRANTY.

# I'm unsure what this does as of now, but it's going to be fun !

import os
import re
import os.path
import glob

import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-s", "--size", type=int,
                    help="size (MB)")
parser.add_argument("-n", "--dry-run",action="store_true",
                    help="dry run (don't repack)")
parser.add_argument("-r", "--repack-size", type=int,
                    help="size of loose objects necessary to run git-repack (MB)")
args = parser.parse_args()

# Provide default values
if args.size:                   # in bytes !
    args.size *= 1024**2
else:
    args.size = 10*1024**2

if args.repack_size:            
    args.repack_size *= 1024 # in KB, compared to count_objects
else:
    args.repack_size = 10*1024



class git_rep:
    """A whole git repository"""

    def __init__(self):
        """Creates a repository referring to the current directory"""
        if os.path.isdir(".git/objects"):
            self.obj_dir = ".git/objects"
        elif os.path.isdir("objects"):
            self.obj_dir = "objects" # bare repository
        else:
            raise RuntimeError("Must be at the root of a git repository")

    def list_packs(self):
        # List pack files
        self.packs = []
        for pck in glob.glob(self.obj_dir + "/pack/*.pack"):
            self.packs.append(packfile(pck))
        return self.packs


    def count_objects(self):
        rv = dict()
        with os.popen('git count-objects -v') as gco:
            for line in gco:
                lst = line.split(":")
                rv[lst[0]] = int(lst[1])
        self.count_objects = rv
        return self.count_objects

    def repack(self):
        os.system("git repack --threads=1")

    def drop_redundant_packs(self):
        with os.popen('git pack-redundant --all') as gpr:
            for line in gpr:
                pck = line.rstrip()
                print "Removing redundant pack: %s" % pck
                os.unlink(pck)

class packed_object:
    def __init__(self, lst):
        self.sha1 = lst[0]
        self.kind = lst[1]
        self.size = int(lst[2])
        self.packed_size = int(lst[3])
        if len(lst) > 6:
            self.base = lst[6]
        else:
            self.base = False

    def __str__(self):
        delta = ""
        if self.base:
            delta = " (delta)"
        
        return "object: %s, %s, size: %d/%d %s" % (self.sha1,
                                                   self.kind,
                                                   self.size,
                                                   self.packed_size,
                                                   delta)

class packfile:
    def __init__(self, pck):
        self.pack_file = pck
        self.size = os.path.getsize(pck)
        self.objects = []

    def __str__(self):
        return "packfile: %s, size: %d, %d objects" % (self.pack_file,
                                                       self.size,
                                                       len(self.objects))
    def read_pack(self):
        with os.popen('git verify-pack -v %s' % self.pack_file) as gvp:
            for line in gvp:
                lst = line.split()
                if len(lst[0]) == 40:
                    self.objects.append(packed_object(lst))
                    # print self.objects[-1]

    @staticmethod
    def repack(packs, dry_run=False):
        """Repacks the given packs"""
        if dry_run:
            print "Would repack packs: %s" % (", ".join(map(lambda x: x.pack_file, packs)))
                
        else:
            print "Repacking packs: %s" % (", ".join(map(lambda x: x.pack_file, packs)))
            with os.popen('git pack-objects .git/objects/pack/pack --threads=1', 'w') as gpa:
                for pck in packs:
                    for o in pck.objects:
                        gpa.write("%s\n" % o.sha1)



rep = git_rep()


    # Now, walk over all the pack files, gathers the one that are smaller
# than a predefined pack size until their whole size is about the threshold

co = rep.count_objects()
if co["size"] > args.repack_size:
    rep.repack()

rep.drop_redundant_packs()
    
packs = []
ts = 0
for pack in rep.list_packs():
    if pack.size < args.size*0.8:
        pack.read_pack()
        packs.append(pack)
        ts += pack.size
        if ts > 0.8*args.size:
            packfile.repack(packs, args.dry_run)
            packs = []
            ts = 0
        print pack
    else:
        print "Pack %s too big, not touching it" % pack

rep.drop_redundant_packs()
