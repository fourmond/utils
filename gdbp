#! /usr/bin/ruby

# A sampling profiler using gdb to get stack traces

# Copyright 2014 by Vincent Fourmond
# This program is free software. It is distributed under the terms of the
# GNU General Public License version 3.0 or later, found at
# https://www.gnu.org/copyleft/gpl.html
#
# There is NO WARRANTY.

require 'open3'
require 'optparse'

class Frame
  attr_accessor :frame, :address, :func, :args, :place

  def initialize(frame, address, func, place)
    @frame = frame
    @address = address
    @func = func.split(/\s*\(/).first
    @args = func[@func.size..-1]
    @place = place
  end

  # Sorts an array of Frame by function. Returns a hash func -> [frames]
  def self.sort_by_func(frames)
    ret = {}
    for f in frames.flatten
      ret[f.func] ||= []
      ret[f.func] << f
    end
    return ret
  end

  # Returns the most common element from the array
  def self.most_common(which, frames)
    vals = {}
    for f in frames
      key = f.send(which)
      vals[key] ||= []
      vals[key] << f
    end

    keys = vals.keys
    keys.sort! do |a,b|
      vals[a].size <=> vals[b].size
    end

    return [keys.last, vals[keys.last].size]
  end
end

class GDBThread
  attr_accessor :id
  attr_accessor :hex
  
  def initialize(i, hx)
    @id = i
    @hex = hx
    @cur_frame = 0
    
    @frames = []
  end
  
  def push_frame(frame, address, func, place)
    
    if frame <= @cur_frame
      @frames << []
    end
    @frames.last << Frame.new(frame, address, func, place)
    @cur_frame = frame
  end
  
  # Prints stats about the stack trace
  def stats
    # very basic !
    srted = Frame.sort_by_func(@frames)

    keys = srted.keys
    keys.sort! do |a,b|
      srted[a].size <=> srted[b].size
    end
    for k in keys
      frs = srted[k]
      mcf = Frame.most_common(:frame, frs)
      plc = Frame.most_common(:place, frs)
      puts "%4d\t%s\t%s\t%s" % [srted[k].size, k, 
                                "##{mcf[0]}(#{mcf[1]})",
                                "##{plc[0]}(#{plc[1]})"]
    end
  end
end

class GDB
  attr_accessor :threads
  
  def initialize(pg, pid)
    @stdin, @stdout, @wait = Open3::popen2e("gdb",  pg, pid)

    @threads = {}
    @buf = ""

    @ct = nil
    
  end

  # Reads the next line, returning _nil_ when no line is ready
  def readline
    begin
      ln = @stdout.read_nonblock(100)
    rescue IO::WaitReadable
    end
    if ln
      @buf << ln
    end
    lns = @buf.split("\n", 2)
    if lns.size > 1
      @buf = lns[1]
      return lns[0]
    end
    return nil
  end

  def flush
    while str = readline
      # Now, we parse:
      if str =~ /Thread\s*(\d+)\s*\(Thread\s*(0x[0-9A-F]+)/i
        tid = $1.to_i
        hx = $2
        @threads[hx] ||= GDBThread.new(tid, hx)
        @ct = @threads[hx]
      elsif str =~/#(\d+)\s+(0x[0-9A-F]+)\s*in\s*(.*)\s+(?:from|at)\s*(\S+)/i
        if ! @ct
          puts "Err: stack frame but no current thread"
        else
          @ct.push_frame($1.to_i, $2, $3, $4)
        end
      elsif str =~ /SYNCING/
        @synced = true
        return
      end
    end
  end

  # Ensures all the commands by gdb have been processed
  def sync
    @synced = false
    send("echo SYNCING\\n")
    while ! @synced
      flush
    end
  end

  def next_prompt
    while true
      str = readline
      p str if str
    end
  end

  def send(str)
    @stdin.puts(str)
  end

  def close
    send("quit")
    @stdin.close
    flush
  end

end

sleep = 0.1
limit = 0

opts = OptionParser.new do |opts|
  opts.on("-s", "--sleep X",
          "Sleep time between signals") do |x|
    sleep = x.to_f
  end
  opts.on("-l", "--limit X",
          "Stop automatically after this many interruptions") do |x|
    limit = x.to_i
  end
end

opts.parse!(ARGV)

number = 0
begin
  gdb = GDB.new(ARGV[0], ARGV[1])
  gdb.send("set pagination off")
  gdb.send("set width 0")
  while true
    if limit > 0 && number >= limit
      break
    end
    number += 1
    gdb.send("thread apply all bt")
    gdb.sync()
    gdb.send("continue")
    sleep(sleep)
    Process.kill("TRAP", ARGV[1].to_i) 
  end
rescue Interrupt
end

puts "Took #{number} samples"
for t in gdb.threads.values
  puts "Thread: #{t.id}: #{t.hex}"
  t.stats
end
gdb.close
