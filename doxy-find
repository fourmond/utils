#! /usr/bin/python

import bs4
import glob
import subprocess


import argparse



# We need the index regardless of what happens
index = bs4.BeautifulSoup(open("xml/index.xml"), "lxml")

parser = argparse.ArgumentParser(description='...')
parser.add_argument('--list-classes', action='store_true')
parser.add_argument('--list-members', action='store_true')
parser.add_argument('--list-statics', action='store_true')
parser.add_argument('--find-member-body', action='append')
parser.add_argument('--find-member-decl', action='append')

# 
parser.add_argument('--find-static', action='append')
parser.add_argument('--emacs', action='store_true')

args = parser.parse_args()

# A dictionnary:
idx = {}

name_idx = {}


class compound:
    def __init__(self,el):
        self.name = el.find("name", recursive=False).string
        self.kind = el['kind']
        self.ref = el['refid']
        self.members = {}
        self.data = None

    def get_data(self):
        if self.data is None:
            self.data = bs4.BeautifulSoup(open("xml/%s.xml" % self.ref), "lxml")
        return self.data

class member:
    def __init__(self, parent, sel):
        nm2 = sel.find("name", recursive=False).string
        self.name = nm2
        self.parent = parent
        self.ref = sel['refid']
        self.kind = sel['kind']
        self.data = None

    def full_name(self):
        if self.parent.kind == "namespace" or self.parent.kind == "class":
            return "%s::%s" % (self.parent.name, self.name)
        return self.name

    def get_data(self):
        if self.data is None:
            cmpd = self.parent.get_data()
            self.data = cmpd.find(id=self.ref)
        return self.data

    def location(self):
        loc = self.get_data().find("location")
        return location(loc["file"], loc["line"])

    def body(self):
        loc = self.get_data().find("location")
        return location(loc["bodyfile"], loc["bodystart"])

    def argstring(self):
        arst = self.get_data().find("argsstring")
        if arst is None:
            return None
        return arst.string

class location:
    def __init__(self, fil, line):
        self.file = fil
        self.line = line

    def str(self):
        return "%s:%s" % (self.file, self.line)
    

for el in index.find_all("compound"):
    if not el['kind'] in idx:
        idx[el['kind']] = {}

    cmpd = compound(el)
    idx[cmpd.kind][cmpd.name] = cmpd
    
    for sel in el.find_all("member"):
        obj = member(cmpd, sel)
        cmpd.members[obj.name] = obj
        name_idx[obj.full_name()] = obj



def print_classes():
    print "\n".join(sorted(idx["class"].keys()))

def print_members(what = "class", print_compound = False):
    for cls in sorted(idx[what].keys()):
        cls = idx[what][cls]
        if len(cls.members) == 0:
            continue
        if print_compound:
            print "%s:" % cls.name
        for m in sorted(cls.members.keys()):
            m = cls.members[m]
            print "%s (%s)" % (m.full_name(), m.kind)

if(args.list_classes):
    print_classes()

if(args.list_members):
    print_members()

if(args.list_statics):
    print_members("file", True)

locs = []
if args.find_member_body:
    for f in args.find_member_body:
        m = name_idx[f]
        locs.append(m.body())

if args.find_member_decl:
    for f in args.find_member_decl:
        m = name_idx[f]
        locs.append(m.location())

# Finds a static in the name argid/contents
if args.find_static:
    print "Loading information about static members:"
    for obj in idx["file"].values():
        print " -> %s " % obj.name
        obj.get_data()
    for f in args.find_static:
        for obj in idx["file"].values():
            for el in obj.members.values():
                argstring = el.argstring()
                if argstring and (f in argstring):
                    locs.append(el.location())

if args.emacs:
    cmdline = ["emacs"]
    for loc in locs:
        cmdline.append("+%s" % loc.line)
        cmdline.append(loc.file)
    subprocess.call(cmdline)
else:
    for loc in locs:
        print loc.str()
